{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOHWECpwR6kjRsBTbzrlQ8n",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Kendi7/AI-for-SE/blob/main/Automated_testing_with_AI_Q2.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 666
        },
        "id": "vrCF1VIYc8lW",
        "outputId": "9b3e85e9-f3cd-4ee4-b49d-6dbb7bf56859"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: selenium in /usr/local/lib/python3.11/dist-packages (4.33.0)\n",
            "Requirement already satisfied: urllib3~=2.4.0 in /usr/local/lib/python3.11/dist-packages (from urllib3[socks]~=2.4.0->selenium) (2.4.0)\n",
            "Requirement already satisfied: trio~=0.30.0 in /usr/local/lib/python3.11/dist-packages (from selenium) (0.30.0)\n",
            "Requirement already satisfied: trio-websocket~=0.12.2 in /usr/local/lib/python3.11/dist-packages (from selenium) (0.12.2)\n",
            "Requirement already satisfied: certifi>=2025.4.26 in /usr/local/lib/python3.11/dist-packages (from selenium) (2025.6.15)\n",
            "Collecting typing_extensions~=4.13.2 (from selenium)\n",
            "  Using cached typing_extensions-4.13.2-py3-none-any.whl.metadata (3.0 kB)\n",
            "Requirement already satisfied: websocket-client~=1.8.0 in /usr/local/lib/python3.11/dist-packages (from selenium) (1.8.0)\n",
            "Requirement already satisfied: attrs>=23.2.0 in /usr/local/lib/python3.11/dist-packages (from trio~=0.30.0->selenium) (25.3.0)\n",
            "Requirement already satisfied: sortedcontainers in /usr/local/lib/python3.11/dist-packages (from trio~=0.30.0->selenium) (2.4.0)\n",
            "Requirement already satisfied: idna in /usr/local/lib/python3.11/dist-packages (from trio~=0.30.0->selenium) (3.10)\n",
            "Requirement already satisfied: outcome in /usr/local/lib/python3.11/dist-packages (from trio~=0.30.0->selenium) (1.3.0.post0)\n",
            "Requirement already satisfied: sniffio>=1.3.0 in /usr/local/lib/python3.11/dist-packages (from trio~=0.30.0->selenium) (1.3.1)\n",
            "Requirement already satisfied: wsproto>=0.14 in /usr/local/lib/python3.11/dist-packages (from trio-websocket~=0.12.2->selenium) (1.2.0)\n",
            "Requirement already satisfied: pysocks!=1.5.7,<2.0,>=1.5.6 in /usr/local/lib/python3.11/dist-packages (from urllib3[socks]~=2.4.0->selenium) (1.7.1)\n",
            "Requirement already satisfied: h11<1,>=0.9.0 in /usr/local/lib/python3.11/dist-packages (from wsproto>=0.14->trio-websocket~=0.12.2->selenium) (0.16.0)\n",
            "Using cached typing_extensions-4.13.2-py3-none-any.whl (45 kB)\n",
            "Installing collected packages: typing_extensions\n",
            "  Attempting uninstall: typing_extensions\n",
            "    Found existing installation: typing_extensions 4.14.0\n",
            "    Uninstalling typing_extensions-4.14.0:\n",
            "      Successfully uninstalled typing_extensions-4.14.0\n",
            "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
            "typeguard 4.4.3 requires typing_extensions>=4.14.0, but you have typing-extensions 4.13.2 which is incompatible.\u001b[0m\u001b[31m\n",
            "\u001b[0mSuccessfully installed typing_extensions-4.13.2\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.colab-display-data+json": {
              "pip_warning": {
                "packages": [
                  "typing_extensions"
                ]
              },
              "id": "f050c79c86e04534be1b4a87689a3dbe"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting typing_extensions==4.14.0\n",
            "  Using cached typing_extensions-4.14.0-py3-none-any.whl.metadata (3.0 kB)\n",
            "Using cached typing_extensions-4.14.0-py3-none-any.whl (43 kB)\n",
            "^C\n"
          ]
        }
      ],
      "source": [
        "!pip install selenium\n",
        "!pip install \"typing_extensions==4.14.0\"\n",
        "!pip install \"torch==2.6.0+cu124\" -f https://download.pytorch.org/whl/torch_stable.html\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **First part of the code**/ Code Aspect"
      ],
      "metadata": {
        "id": "oYW1dlxir77L"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from selenium import webdriver\n",
        "from selenium.webdriver.common.by import By\n",
        "from selenium.webdriver.chrome.options import Options\n",
        "from selenium.webdriver.support.ui import WebDriverWait\n",
        "from selenium.webdriver.support import expected_conditions as EC\n",
        "from selenium.common.exceptions import TimeoutException\n",
        "import time\n",
        "import json\n",
        "\n",
        "class AIEnhancedLoginTest:\n",
        "    def __init__(self):\n",
        "        options = Options()\n",
        "        options.add_argument(\"--headless\")  # No browser UI\n",
        "        options.add_argument(\"--no-sandbox\")  # Bypass OS security model (Linux fix)\n",
        "        options.add_argument(\"--disable-dev-shm-usage\")  # Avoid shared memory crash\n",
        "\n",
        "        self.driver = webdriver.Chrome(options=options)\n",
        "        self.results = []\n",
        "\n",
        "    def setup_test(self):\n",
        "        \"\"\"Navigate to the login page\"\"\"\n",
        "        self.driver.get(\"https://the-internet.herokuapp.com/login\")\n",
        "        self.driver.set_window_size(1280, 800)\n",
        "\n",
        "    def test_valid_login(self):\n",
        "        \"\"\"Test login with valid credentials\"\"\"\n",
        "        try:\n",
        "            username = WebDriverWait(self.driver, 10).until(\n",
        "                EC.presence_of_element_located((By.ID, \"username\"))\n",
        "            )\n",
        "            password = self.driver.find_element(By.ID, \"password\")\n",
        "            login_button = self.driver.find_element(By.CSS_SELECTOR, \"button[type='submit']\")\n",
        "\n",
        "            username.clear()\n",
        "            username.send_keys(\"tomsmith\")\n",
        "            password.clear()\n",
        "            password.send_keys(\"SuperSecretPassword!\")\n",
        "            login_button.click()\n",
        "\n",
        "            WebDriverWait(self.driver, 5).until(\n",
        "                EC.presence_of_element_located((By.CSS_SELECTOR, \".flash.success\"))\n",
        "            )\n",
        "\n",
        "            self.results.append({\n",
        "                \"test_case\": \"valid_login\",\n",
        "                \"status\": \"PASS\",\n",
        "                \"message\": \"Login successful\",\n",
        "                \"timestamp\": time.time()\n",
        "            })\n",
        "            self.driver.save_screenshot(\"valid_login_pass.png\")\n",
        "            return True\n",
        "\n",
        "        except TimeoutException:\n",
        "            self.results.append({\n",
        "                \"test_case\": \"valid_login\",\n",
        "                \"status\": \"FAIL\",\n",
        "                \"message\": \"Login failed – success message not found\",\n",
        "                \"timestamp\": time.time()\n",
        "            })\n",
        "            self.driver.save_screenshot(\"valid_login_fail.png\")\n",
        "            return False\n",
        "\n",
        "    def test_invalid_login(self, username=\"invalid\", password=\"invalid\"):\n",
        "        \"\"\"Test login with invalid credentials\"\"\"\n",
        "        try:\n",
        "            self.driver.get(\"https://the-internet.herokuapp.com/login\")\n",
        "            user_input = WebDriverWait(self.driver, 10).until(\n",
        "                EC.presence_of_element_located((By.ID, \"username\"))\n",
        "            )\n",
        "            pass_input = self.driver.find_element(By.ID, \"password\")\n",
        "            login_btn = self.driver.find_element(By.CSS_SELECTOR, \"button[type='submit']\")\n",
        "\n",
        "            user_input.clear()\n",
        "            user_input.send_keys(username)\n",
        "            pass_input.clear()\n",
        "            pass_input.send_keys(password)\n",
        "            login_btn.click()\n",
        "\n",
        "            WebDriverWait(self.driver, 5).until(\n",
        "                EC.presence_of_element_located((By.CSS_SELECTOR, \".flash.error\"))\n",
        "            )\n",
        "\n",
        "            self.results.append({\n",
        "                \"test_case\": \"invalid_login\",\n",
        "                \"status\": \"PASS\",\n",
        "                \"message\": \"Proper error shown for invalid credentials\",\n",
        "                \"timestamp\": time.time()\n",
        "            })\n",
        "            self.driver.save_screenshot(\"invalid_login_pass.png\")\n",
        "            return True\n",
        "\n",
        "        except TimeoutException:\n",
        "            self.results.append({\n",
        "                \"test_case\": \"invalid_login\",\n",
        "                \"status\": \"FAIL\",\n",
        "                \"message\": \"No error shown for invalid login\",\n",
        "                \"timestamp\": time.time()\n",
        "            })\n",
        "            self.driver.save_screenshot(\"invalid_login_fail.png\")\n",
        "            return False\n",
        "\n",
        "    def run_ai_enhanced_tests(self):\n",
        "        self.setup_test()\n",
        "        self.test_valid_login()\n",
        "        self.test_invalid_login()\n",
        "        self.driver.quit()\n",
        "\n",
        "        # Save results to JSON\n",
        "        with open(\"test_results.json\", \"w\") as f:\n",
        "            json.dump(self.results, f, indent=4)\n",
        "\n",
        "        # Print results\n",
        "        print(\"✅ Tests complete. Results saved to test_results.json\")\n",
        "        print(\"\\n📝 Test Results:\")\n",
        "        print(json.dumps(self.results, indent=4))\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    test_runner = AIEnhancedLoginTest()\n",
        "    test_runner.run_ai_enhanced_tests()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ktpDY0WAlAKV",
        "outputId": "dfd70586-eccf-4078-9a2d-6b61abd9539a"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Tests complete. Results saved to test_results.json\n",
            "\n",
            "📝 Test Results:\n",
            "[\n",
            "    {\n",
            "        \"test_case\": \"valid_login\",\n",
            "        \"status\": \"PASS\",\n",
            "        \"message\": \"Login successful\",\n",
            "        \"timestamp\": 1750343553.6928358\n",
            "    },\n",
            "    {\n",
            "        \"test_case\": \"invalid_login\",\n",
            "        \"status\": \"PASS\",\n",
            "        \"message\": \"Proper error shown for invalid credentials\",\n",
            "        \"timestamp\": 1750343554.4118028\n",
            "    }\n",
            "]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Second code version\n"
      ],
      "metadata": {
        "id": "Fmbhy3wPsNZ_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from selenium import webdriver\n",
        "from selenium.webdriver.common.by import By\n",
        "from selenium.webdriver.chrome.options import Options\n",
        "from selenium.webdriver.support.ui import WebDriverWait\n",
        "from selenium.webdriver.support import expected_conditions as EC\n",
        "from selenium.common.exceptions import TimeoutException\n",
        "import time\n",
        "import json\n",
        "from datetime import datetime\n",
        "\n",
        "class AIEnhancedLoginTest:\n",
        "    def __init__(self):\n",
        "        options = Options()\n",
        "        options.add_argument(\"--headless\")  # Run in headless mode (no UI)\n",
        "        options.add_argument(\"--no-sandbox\")\n",
        "        options.add_argument(\"--disable-dev-shm-usage\")\n",
        "\n",
        "        self.driver = webdriver.Chrome(options=options)\n",
        "        self.results = []\n",
        "\n",
        "    def setup_test(self):\n",
        "        \"\"\"Open the login page\"\"\"\n",
        "        self.driver.get(\"https://the-internet.herokuapp.com/login\")\n",
        "        self.driver.set_window_size(1280, 800)\n",
        "\n",
        "    def test_valid_login(self):\n",
        "        \"\"\"Check valid credentials\"\"\"\n",
        "        try:\n",
        "            username = WebDriverWait(self.driver, 10).until(\n",
        "                EC.presence_of_element_located((By.ID, \"username\"))\n",
        "            )\n",
        "            password = self.driver.find_element(By.ID, \"password\")\n",
        "            login_button = self.driver.find_element(By.CSS_SELECTOR, \"button[type='submit']\")\n",
        "\n",
        "            username.send_keys(\"tomsmith\")\n",
        "            password.send_keys(\"SuperSecretPassword!\")\n",
        "            login_button.click()\n",
        "\n",
        "            WebDriverWait(self.driver, 5).until(\n",
        "                EC.presence_of_element_located((By.CSS_SELECTOR, \".flash.success\"))\n",
        "            )\n",
        "\n",
        "            self.results.append({\n",
        "                \"test_case\": \"valid_login\",\n",
        "                \"status\": \"PASS\",\n",
        "                \"message\": \"Login successful\",\n",
        "                \"timestamp\": datetime.now().isoformat()\n",
        "            })\n",
        "            self.driver.save_screenshot(\"valid_login_pass.png\")\n",
        "\n",
        "        except TimeoutException:\n",
        "            self.results.append({\n",
        "                \"test_case\": \"valid_login\",\n",
        "                \"status\": \"FAIL\",\n",
        "                \"message\": \"Login failed – success message not found\",\n",
        "                \"timestamp\": datetime.now().isoformat()\n",
        "            })\n",
        "            self.driver.save_screenshot(\"valid_login_fail.png\")\n",
        "\n",
        "    def test_invalid_login(self, username=\"invalid\", password=\"invalid\"):\n",
        "        \"\"\"Check invalid credentials\"\"\"\n",
        "        try:\n",
        "            self.driver.get(\"https://the-internet.herokuapp.com/login\")\n",
        "            user_input = WebDriverWait(self.driver, 10).until(\n",
        "                EC.presence_of_element_located((By.ID, \"username\"))\n",
        "            )\n",
        "            pass_input = self.driver.find_element(By.ID, \"password\")\n",
        "            login_btn = self.driver.find_element(By.CSS_SELECTOR, \"button[type='submit']\")\n",
        "\n",
        "            user_input.send_keys(username)\n",
        "            pass_input.send_keys(password)\n",
        "            login_btn.click()\n",
        "\n",
        "            WebDriverWait(self.driver, 5).until(\n",
        "                EC.presence_of_element_located((By.CSS_SELECTOR, \".flash.error\"))\n",
        "            )\n",
        "\n",
        "            self.results.append({\n",
        "                \"test_case\": \"invalid_login\",\n",
        "                \"status\": \"PASS\",\n",
        "                \"message\": \"Proper error shown for invalid credentials\",\n",
        "                \"timestamp\": datetime.now().isoformat()\n",
        "            })\n",
        "            self.driver.save_screenshot(\"invalid_login_pass.png\")\n",
        "\n",
        "        except TimeoutException:\n",
        "            self.results.append({\n",
        "                \"test_case\": \"invalid_login\",\n",
        "                \"status\": \"FAIL\",\n",
        "                \"message\": \"No error shown for invalid login\",\n",
        "                \"timestamp\": datetime.now().isoformat()\n",
        "            })\n",
        "            self.driver.save_screenshot(\"invalid_login_fail.png\")\n",
        "\n",
        "    def run_ai_enhanced_tests(self):\n",
        "        \"\"\"Execute all tests and print/report results\"\"\"\n",
        "        print(\"🚀 Starting AI-enhanced login tests...\\n\")\n",
        "        self.setup_test()\n",
        "        self.test_valid_login()\n",
        "        self.test_invalid_login()\n",
        "        self.driver.quit()\n",
        "\n",
        "        # Save test results to JSON\n",
        "        with open(\"test_results.json\", \"w\") as f:\n",
        "            json.dump(self.results, f, indent=4)\n",
        "\n",
        "        # Print results in table-like format\n",
        "        print(\"✅ Tests complete. Results saved to test_results.json\")\n",
        "        print(\"\\n📝 Test Results:\")\n",
        "        for res in self.results:\n",
        "            print(f\"- {res['test_case']} | {res['status']} | {res['message']} | {res['timestamp']}\")\n",
        "\n",
        "# Main execution\n",
        "if __name__ == \"__main__\":\n",
        "    test_runner = AIEnhancedLoginTest()\n",
        "    test_runner.run_ai_enhanced_tests()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "v7ZPel6KruiF",
        "outputId": "9aee408a-49ae-4aae-cc70-50718c5a24f3"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🚀 Starting AI-enhanced login tests...\n",
            "\n",
            "✅ Tests complete. Results saved to test_results.json\n",
            "\n",
            "📝 Test Results:\n",
            "- valid_login | PASS | Login successful | 2025-06-19T14:54:19.233081\n",
            "- invalid_login | PASS | Proper error shown for invalid credentials | 2025-06-19T14:54:19.964437\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **How AI improves test coverage compared to manual testing.**"
      ],
      "metadata": {
        "id": "fTlxHbvdtOkh"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "AI Testing Improvement Analysis (150 words)\n",
        "AI significantly enhances test coverage compared to manual testing through intelligent test case generation and dynamic adaptation. Traditional manual testing often follows predetermined scripts, missing edge cases and real-world scenarios.\n",
        "AI Improvements:\n",
        "\n",
        "Dynamic Test Generation: AI can automatically generate multiple test scenarios based on input field analysis, including boundary conditions, data type variations, and injection attempts.\n",
        "Intelligent Error Detection: Unlike static manual tests, AI can adapt its validation criteria based on application behavior patterns, identifying subtle issues that manual scripts might miss.\n",
        "Comprehensive Coverage: AI systematically explores all possible input combinations, ensuring thorough coverage of positive, negative, and edge cases.\n",
        "Self-Healing Tests: AI-powered testing tools can automatically update selectors and test steps when UI elements change, reducing maintenance overhead.\n",
        "Pattern Recognition: AI learns from test failures to predict and prevent similar issues in future releases.\n",
        "\n",
        "The implemented test demonstrates AI-like intelligence by automatically testing multiple invalid scenarios and adapting verification strategies, achieving broader coverage than traditional single-scenario manual tests."
      ],
      "metadata": {
        "id": "NyjVDOgntO-q"
      }
    }
  ]
}